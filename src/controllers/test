"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_status_codes_1 = require("http-status-codes");
const core_1 = require("@overnightjs/core");
const config_json_1 = __importDefault(require("../../config.json"));
const util_1 = require("../util");
const fs_1 = require("fs");
const multer_1 = __importDefault(require("multer"));
const mime_1 = require("mime");
const User_1 = require("../entities/User");
const path_1 = require("path");
const upload = multer_1.default({ dest: config_json_1.default.upload.tempDir });
let APIController = class APIController {
    async upload(req, res) {
        if (req.headers['authorization'] === config_json_1.default.administrator.authorization)
            return res.status(http_status_codes_1.BAD_REQUEST).json({ code: http_status_codes_1.BAD_REQUEST, message: "You can't upload files with the administrator account." });
        if (req.headers['authorization'] !== (await this.orm.repos.user.find({ where: { token: req.headers['authorization'] } }))[0].token)
            return res.status(http_status_codes_1.FORBIDDEN).json({ code: http_status_codes_1.FORBIDDEN, message: "Unauthorized" });
        const user = (await this.orm.repos.user.find({ where: { token: req.headers['authorization'] } }))[0];
        const file = req.file;
        const id = util_1.randomId(5);
        const extension = mime_1.getExtension(file.mimetype);
        const source = fs_1.createReadStream(file.path);
        if (!fs_1.existsSync(config_json_1.default.upload.uploadDir))
            fs_1.mkdirSync(config_json_1.default.upload.uploadDir);
        const destination = fs_1.createWriteStream(`${config_json_1.default.upload.uploadDir}${path_1.sep}${id}.${extension}`);
        source.pipe(destination, { end: false });
        source.on("end", function () {
